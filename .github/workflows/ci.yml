name: CI Pipeline

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

jobs:
  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        id: docker-cache
        with:
          path: /tmp/.buildx-cache
          key: docker-${{ hashFiles('DevOps/Docker/Dockerfile', 'docker-compose.yml') }}-${{ github.run_id }}
          restore-keys: |
            docker-${{ hashFiles('DevOps/Docker/Dockerfile', 'docker-compose.yml') }}
            docker-

      - name: Get Project Name
        id: project-name
        run: |
          # Extract the project name from docker-compose.yml
          PROJECT_NAME=$(basename $(pwd) | tr '[:upper:]' '[:lower:]')
          echo "project-name=${PROJECT_NAME}" >> $GITHUB_OUTPUT

      - name: Build Docker Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: DevOps/Docker/Dockerfile
          tags: ${{ steps.project-name.outputs.project-name }}_app:ci-image
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Save Docker Image
        run: docker save -o image.tar ${{ steps.project-name.outputs.project-name }}_app:ci-image

      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  parallel-tasks:
    name: Parallel Tasks
    needs: build-docker-image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        type: [c-static, python-static, firmware]
      fail-fast: false
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker Image
        run: docker load -i image.tar

      - name: Get Project Name
        id: project-name
        run: |
          PROJECT_NAME=$(basename $(pwd) | tr '[:upper:]' '[:lower:]')
          echo "project-name=${PROJECT_NAME}" >> $GITHUB_OUTPUT

      - name: Start Docker Compose
        run: |
          # Tag the image to match what docker-compose expects
          docker tag ${{ steps.project-name.outputs.project-name }}_app:ci-image ${{ steps.project-name.outputs.project-name }}_app
          docker-compose up -d --no-build

      - name: Run Analysis or Build
        run: |
          case "${{ matrix.type }}" in
            c-static)
              docker-compose exec -T app bash -c "dos2unix /workspace/ContinuousIntegration/run_c_static_code_analysis.sh && bash /workspace/ContinuousIntegration/run_c_static_code_analysis.sh"
              docker cp $(docker-compose ps -q app):/workspace/build/C_Lint_ReportApplicationOnly.txt .
              docker cp $(docker-compose ps -q app):/workspace/build/C_Lint_ReportFull.txt .
              ;;
            python-static)
              docker-compose exec -T app bash -c "dos2unix /workspace/ContinuousIntegration/run_python_static_code_analysis.sh && bash /workspace/ContinuousIntegration/run_python_static_code_analysis.sh"
              docker cp $(docker-compose ps -q app):/workspace/build/python_lint_report .
              ;;
            firmware)
              docker-compose exec -T app bash -c "cd /workspace/build && cmake ../Software/Firmware/ && make -j$(nproc)"
              docker cp $(docker-compose ps -q app):/workspace/build/IonizationChamber.cdb .
              docker cp $(docker-compose ps -q app):/workspace/build/IonizationChamber.lk .
              docker cp $(docker-compose ps -q app):/workspace/build/IonizationChamber.ihx .
              docker cp $(docker-compose ps -q app):/workspace/build/IonizationChamber.map .
              ;;
          esac

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.type }}-artifacts
          path: |
            ${{ matrix.type == 'c-static' && 'C_Lint_Report*.txt' || '' }}
            ${{ matrix.type == 'python-static' && 'python_lint_report' || '' }}
            ${{ matrix.type == 'firmware' && 'IonizationChamber.*' || '' }}

      - name: Clean Up Containers
        if: always()
        run: docker-compose down